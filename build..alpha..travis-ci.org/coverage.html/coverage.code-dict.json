{"/home/travis/build/npmtest/node-npmtest-osprey/test.js":"/* istanbul instrument in package npmtest_osprey */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-osprey/lib.npmtest_osprey.js":"/* istanbul instrument in package npmtest_osprey */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_osprey = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_osprey = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-osprey/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-osprey && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_osprey */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_osprey\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_osprey.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_osprey.rollup.js'] =\n            local.assetsDict['/assets.npmtest_osprey.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_osprey.__dirname + '/lib.npmtest_osprey.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-osprey/node_modules/osprey/osprey.js":"var Router = require('osprey-router')\nvar compose = require('compose-middleware').compose\nvar methodHandler = require('osprey-method-handler')\nvar server = require('./lib/server')\nvar proxy = require('./lib/proxy')\nvar security = require('./lib/security')\nvar errorHandler = require('request-error-handler')\nvar extend = require('xtend')\n\n/**\n * Expose functions.\n */\nexports.Router = Router\nexports.server = server\nexports.proxy = proxy\nexports.security = security\nexports.errorHandler = errorHandler\n\n/**\n * Proxy JSON schema addition to method handler.\n */\nexports.addJsonSchema = function (schema, key) {\n  methodHandler.addJsonSchema(schema, key)\n}\n\n/**\n * Load an Osprey server directly from a RAML file.\n *\n * @param  {String}  path\n * @param  {Object}  opts\n * @return {Promise}\n */\nexports.loadFile = function (path, opts) {\n  var options = opts || {}\n\n  return require('raml-1-parser')\n    .loadRAML(path, { rejectOnErrors: true })\n    .then(function (ramlApi) {\n      var raml = ramlApi.expand(true).toJSON({\n        serializeMetadata: false\n      })\n      var middleware = []\n      var handler = server(raml, extend({ RAMLVersion: ramlApi.RAMLVersion() }, options.server))\n      var error = errorHandler(options.errorHandler)\n\n      if (options.security) {\n        middleware.push(security(raml, options.security))\n      }\n\n      middleware.push(handler)\n\n      if (!options.disableErrorInterception) {\n        middleware.push(error)\n      }\n\n      var result = compose(middleware)\n      result.ramlUriParameters = handler.ramlUriParameters\n      return result\n    })\n}\n","/home/travis/build/npmtest/node-npmtest-osprey/node_modules/osprey-router/osprey-router.js":"var Engine = require('router/engine')\nvar methods = require('methods')\nvar flatten = require('array-flatten')\nvar ramlPath = require('raml-path-match')\nvar extend = require('xtend')\nvar slice = Array.prototype.slice\n\n/**\n * Expose `router`.\n */\nmodule.exports = router\n\n/**\n * Initialize router instance.\n *\n * @param  {Object}   options\n * @return {Function}\n */\nfunction router (options) {\n  return new Router(options)\n}\n\n/**\n * Construct a router instance.\n */\nfunction Router (options) {\n  var router = Engine.call(this, options)\n\n  // Construct with default URI parameters.\n  router.ramlUriParameters = options && options.ramlUriParameters || {}\n  router.RAMLVersion = options && options.RAMLVersion || undefined\n\n  return router\n}\n\n/**\n * Inherits from the router engine.\n */\nRouter.prototype = Object.create(Engine.prototype)\n\n/**\n * Create a `raml-path-match` compatible `.use`.\n */\nRouter.prototype.use = function use () {\n  var offset = 0\n  var path = '/'\n  var schema\n\n  if (!isMiddleware(arguments[0])) {\n    path = arguments[0]\n    offset = 1\n\n    if (!isMiddleware(arguments[1])) {\n      schema = arguments[1]\n      offset = 2\n    }\n  }\n\n  var callbacks = flatten(slice.call(arguments, offset))\n  var params = extend(this.ramlUriParameters, schema)\n\n  var match = ramlPath(path, params, {\n    sensitive: this.caseSensitive,\n    strict: this.strict,\n    end: false,\n    RAMLVersion: this.RAMLVersion\n  })\n\n  this.ramlUriParameters = params\n\n  return Engine.prototype.use.call(this, path, match, callbacks)\n}\n\n/**\n * Create a `raml-path-match` compatible route.\n */\nRouter.prototype.route = function route (path, schema) {\n  var params = extend(this.ramlUriParameters, schema)\n\n  var match = ramlPath(path, params, {\n    sensitive: this.caseSensitive,\n    strict: this.strict,\n    end: true,\n    RAMLVersion: this.RAMLVersion\n  })\n\n  this.ramlUriParameters = params\n\n  return Engine.prototype.route.call(this, path, match)\n}\n\n// create Router#VERB functions\nmethods.concat('all').forEach(function (method) {\n  Router.prototype[method] = function (path, schema) {\n    var hasSchema = !isMiddleware(schema)\n    var route = this.route(path, hasSchema ? schema : null)\n\n    route[method].apply(route, slice.call(arguments, hasSchema ? 2 : 1))\n\n    return this\n  }\n})\n\n/**\n * Check if a value is possible middleware.\n *\n * @param  {*}       value\n * @return {Boolean}\n */\nfunction isMiddleware (value) {\n  return typeof value === 'function' || Array.isArray(value)\n}\n","/home/travis/build/npmtest/node-npmtest-osprey/node_modules/osprey-method-handler/osprey-method-handler.js":"var is = require('type-is')\nvar extend = require('xtend')\nvar parseurl = require('parseurl')\nvar querystring = require('querystring')\nvar createError = require('http-errors')\nvar lowercaseKeys = require('lowercase-keys')\nvar ramlSanitize = require('raml-sanitize')()\nvar ramlValidate = require('raml-validate')()\nvar isStream = require('is-stream')\nvar values = require('object-values')\nvar Negotiator = require('negotiator')\nvar standardHeaders = require('standard-headers')\nvar compose = require('compose-middleware').compose\nvar Ajv = require('ajv')\nvar debug = require('debug')('osprey-method-handler')\n\nvar ajv = Ajv({ allErrors: true, verbose: true, jsonPointers: true, errorDataPath: 'property' })\n\n/**\n * Detect JSON schema v3.\n *\n * @type {RegExp}\n */\nvar JSON_SCHEMA_03 = /^http:\\/\\/json-schema\\.org\\/draft-03\\/(?:hyper-)?schema/i\n\n/**\n * Get all default headers.\n *\n * @type {Object}\n */\nvar DEFAULT_REQUEST_HEADER_PARAMS = {}\n\n// Fill header params with non-required parameters.\nstandardHeaders.request.forEach(function (header) {\n  DEFAULT_REQUEST_HEADER_PARAMS[header] = {\n    type: 'string',\n    required: false\n  }\n})\n\n/**\n * Application body parsers and validators.\n *\n * @type {Array}\n */\nvar BODY_HANDLERS = [\n  ['application/json', jsonBodyHandler],\n  ['text/xml', xmlBodyHandler],\n  ['application/x-www-form-urlencoded', urlencodedBodyHandler],\n  ['multipart/form-data', formDataBodyHandler]\n]\n\n/**\n * Set custom file validation.\n *\n * @param  {Stream}  value\n * @return {Boolean}\n */\nramlValidate.TYPES.file = function (stream) {\n  return isStream(stream)\n}\n\n/**\n * Export `ospreyMethodHandler`.\n */\nmodule.exports = ospreyMethodHandler\nmodule.exports.addJsonSchema = addJsonSchema\n\n/**\n * Expose a method to add JSON schemas before compilation.\n *\n * @param {Object} schema\n * @param {String} key\n */\nfunction addJsonSchema (schema, key) {\n  ajv.addSchema(schema, key)\n}\n\n/**\n * Create a middleware request/response handler.\n *\n * @param  {Object}   schema\n * @param  {String}   path\n * @param  {String}   method\n * @param  {Object}   options\n * @return {Function}\n */\nfunction ospreyMethodHandler (schema, path, method, options) {\n  schema = schema || {}\n  options = options || {}\n\n  var middleware = []\n\n  // Attach the resource path to every validation handler.\n  middleware.push(function (req, res, next) {\n    req.resourcePath = path\n\n    return next()\n  })\n\n  // Headers *always* have a default handler.\n  middleware.push(headerHandler(schema.headers, path, method, options))\n\n  if (schema.body) {\n    middleware.push(bodyHandler(schema.body, path, method, options))\n  } else {\n    if (options.discardUnknownBodies !== false) {\n      debug(\n        '%s %s: Discarding body request stream: ' +\n        'Use \"*/*\" or set \"body\" to accept content types',\n        method,\n        path\n      )\n\n      middleware.push(discardBody)\n    }\n  }\n\n  if (schema.responses) {\n    middleware.push(acceptsHandler(schema.responses, path, method, options))\n  }\n\n  if (schema.queryParameters) {\n    middleware.push(queryHandler(schema.queryParameters, path, method, options))\n  } else {\n    if (options.discardUnknownQueryParameters !== false) {\n      debug(\n        '%s %s: Discarding all query parameters: ' +\n        'Define \"queryParameters\" to receive parameters',\n        method,\n        path\n      )\n\n      middleware.push(ospreyFastQuery)\n    }\n  }\n\n  return compose(middleware)\n}\n\n/**\n * Create a HTTP accepts handler.\n *\n * @param  {Object}   responses\n * @param  {String}   path\n * @param  {String}   method\n * @return {Function}\n */\nfunction acceptsHandler (responses, path, method) {\n  var accepts = {}\n\n  // Collect all valid response types.\n  Object.keys(responses || {})\n    .filter(function (code) {\n      return code >= 200 && code < 300\n    })\n    .forEach(function (code) {\n      var response = responses[code]\n      var body = response && response.body || {}\n\n      Object.keys(body).forEach(function (type) {\n        accepts[type] = true\n      })\n    })\n\n  var mediaTypes = Object.keys(accepts)\n\n  // The user will accept anything when there are no types defined.\n  if (!mediaTypes.length) {\n    debug('%s %s: No accepts media types defined', method, path)\n\n    return []\n  }\n\n  var validTypes = mediaTypes.map(JSON.stringify).join(', ')\n  var expectedMessage = mediaTypes.length === 1 ? validTypes : 'one of ' + validTypes\n\n  return function ospreyAccepts (req, res, next) {\n    var negotiator = new Negotiator(req)\n\n    if (!negotiator.mediaType(mediaTypes)) {\n      return next(createError(\n        406, 'Unsupported accept header \"' + req.headers.accept + '\", expected ' + expectedMessage\n      ))\n    }\n\n    return next()\n  }\n}\n\n/**\n * Create query string handling middleware.\n *\n * @param  {Object}   queryParameters\n * @param  {String}   path\n * @param  {String}   method\n * @param  {Object}   options\n * @return {Function}\n */\nfunction queryHandler (queryParameters, path, method, options) {\n  var sanitize = ramlSanitize(queryParameters)\n  var validate = ramlValidate(queryParameters, options.RAMLVersion)\n\n  return function ospreyQuery (req, res, next) {\n    var reqUrl = parseurl(req)\n    var query = sanitize(parseQuerystring(reqUrl.query))\n    var result = validate(query)\n\n    if (!result.valid) {\n      return next(createValidationError(formatRamlErrors(result.errors, 'query')))\n    }\n\n    var qs = querystring.stringify(query)\n\n    if (options.discardUnknownQueryParameters !== false) {\n      req.url = reqUrl.pathname + (qs ? '?' + qs : '')\n      req.query = query\n    } else {\n      req.query = extend(req.query, query)\n    }\n\n    return next()\n  }\n}\n\n/**\n * Parse query strings with support for array syntax (E.g. `a[]=1&a[]=2`).\n */\nfunction parseQuerystring (query) {\n  if (query == null) {\n    return {}\n  }\n\n  return querystring.parse(query.replace(/(?:%5B|\\[)\\d*(?:%5D|])=/ig, '='))\n}\n\n/**\n * Create a request header handling middleware.\n *\n * @param  {Object}   headerParameters\n * @param  {String}   path\n * @param  {String}   method\n * @param  {Object}   options\n * @return {Function}\n */\nfunction headerHandler (headerParameters, path, method, options) {\n  var headers = extend(DEFAULT_REQUEST_HEADER_PARAMS, lowercaseKeys(headerParameters))\n  var sanitize = ramlSanitize(headers)\n  var validate = ramlValidate(headers, options.RAMLVersion)\n\n  return function ospreyMethodHeader (req, res, next) {\n    var headers = sanitize(lowercaseKeys(req.headers))\n    var result = validate(headers)\n\n    if (!result.valid) {\n      return next(createValidationError(formatRamlErrors(result.errors, 'header')))\n    }\n\n    // Unsets invalid headers. Does not touch `rawHeaders`.\n    req.headers = options.discardUnknownHeaders === false ? extend(req.headers, headers) : headers\n\n    return next()\n  }\n}\n\n/**\n * Handle incoming request bodies.\n *\n * @param  {Object}   bodies\n * @param  {String}   path\n * @param  {String}   method\n * @param  {Object}   options\n * @return {Function}\n */\nfunction bodyHandler (bodies, path, method, options) {\n  var bodyMap = {}\n  var types = Object.keys(bodies)\n\n  types.forEach(function (type) {\n    var handlers = BODY_HANDLERS\n      .filter(function (handler) {\n        return is.is(handler[0], type)\n      })\n\n    // Do not parse on wildcards.\n    if (handlers.length > 1 && !options.parseBodiesOnWildcard) {\n      return\n    }\n\n    // Attach existing handlers.\n    handlers.forEach(function (handler) {\n      var properType = handler[0]\n      var fn = handler[1]\n\n      bodyMap[properType] = fn(bodies[type], path, method, options)\n    })\n  })\n\n  var validTypes = types.map(JSON.stringify).join(', ')\n  var expectedMessage = types.length === 1 ? validTypes : 'one of ' + validTypes\n\n  return function ospreyContentType (req, res, next) {\n    var contentType = req.headers['content-type']\n\n    // Error when no body has been sent.\n    if (!is.hasBody(req)) {\n      return next(createError(\n        415,\n        'No body sent with request for ' + req.method + ' ' + req.originalUrl +\n        ' with content-type \"' + contentType + '\"'\n      ))\n    }\n\n    var type = is.is(contentType, types)\n\n    if (!type) {\n      return next(createError(\n        415,\n        'Unsupported content-type header \"' + contentType + '\", expected ' + expectedMessage\n      ))\n    }\n\n    var fn = bodyMap[type]\n\n    return fn ? fn(req, res, next) : next()\n  }\n}\n\n/**\n * Handle JSON requests.\n *\n * @param  {Object}   body\n * @param  {String}   path\n * @param  {String}   method\n * @param  {Object}   options\n * @return {Function}\n */\nfunction jsonBodyHandler (body, path, method, options) {\n  var jsonBodyParser = require('body-parser').json({\n    type: [],\n    strict: false,\n    limit: options.limit,\n    reviver: options.reviver\n  })\n  var middleware = [jsonBodyParser]\n  var schema = body && (body.properties || body.type) || undefined\n  var isRAMLType = schema ? schema.constructor === {}.constructor : false\n\n  // This is most likely a JSON schema\n  if (!schema) {\n    schema = body.schema\n  // otherwise, it's an inline type\n  } else if (!isRAMLType) {\n    schema = body\n    isRAMLType = true\n  } else if (isRAMLType && Object.keys(schema).length === 0) {\n    schema = body\n  }\n\n  if (schema) {\n    middleware.push(jsonBodyValidationHandler(schema, path, method, options))\n  }\n\n  if (!isRAMLType) {\n    return compose(middleware)\n  }\n\n  // Validate RAML 1.0 min/maxProperties and additionalProperties\n  var minProperties = body.minProperties\n  var maxProperties = body.maxProperties\n  var additionalProperties = body.additionalProperties !== false\n\n  if (minProperties > 0) {\n    middleware.push(function (req, res, next) {\n      if (Object.keys(req.body).length < minProperties) {\n        return next(createValidationError(formatRamlErrors([{\n          rule: 'minProperties',\n          attr: minProperties\n        }], 'json')))\n      }\n\n      return next()\n    })\n  }\n\n  if (maxProperties > 0) {\n    middleware.push(function (req, res, next) {\n      if (Object.keys(req.body).length > maxProperties) {\n        return next(createValidationError(formatRamlErrors([{\n          rule: 'maxProperties',\n          attr: maxProperties\n        }], 'json')))\n      }\n\n      return next()\n    })\n  }\n\n  if (!additionalProperties) {\n    middleware.push(function (req, res, next) {\n      var additionalPropertyFound = Object.keys(req.body).some(function (key) {\n        return !schema.hasOwnProperty(key)\n      })\n      if (additionalPropertyFound) {\n        return next(createValidationError(formatRamlErrors([{\n          rule: 'additionalProperties',\n          attr: additionalProperties\n        }], 'json')))\n      }\n\n      return next()\n    })\n  }\n\n  return compose(middleware)\n}\n\n/**\n * Validate JSON bodies.\n *\n * @param  {Object|String}  schema\n * @param  {String}         path\n * @param  {String}         method\n * @return {Function}\n */\nfunction jsonBodyValidationHandler (schema, path, method, options) {\n  var jsonSchemaCompatibility = require('json-schema-compatibility')\n  var isRAMLType = schema.constructor === {}.constructor\n  var validate\n\n  // RAML data types\n  if (isRAMLType) {\n    validate = ramlValidate(schema, options.RAMLVersion)\n\n  // JSON schema\n  } else {\n    try {\n      schema = JSON.parse(schema)\n\n      // Convert draft-03 schema to 04.\n      if (JSON_SCHEMA_03.test(schema.$schema)) {\n        schema = jsonSchemaCompatibility.v4(schema)\n        schema.$schema = 'http://json-schema.org/draft-04/schema'\n      }\n\n      validate = ajv.compile(schema)\n    } catch (err) {\n      err.message = 'Unable to compile JSON schema for ' + method + ' ' + path + ': ' + err.message\n      throw err\n    }\n  }\n\n  return function ospreyJsonBody (req, res, next) {\n    var result = validate(req.body)\n\n    // RAML data types\n    if (isRAMLType) {\n      if (!result.valid) {\n        return next(createValidationError(formatRamlErrors(result.errors, 'json')))\n      }\n\n    // JSON schema\n    } else {\n      if (!result) {\n        return next(createValidationError(formatJsonErrors(validate.errors)))\n      }\n    }\n\n    return next()\n  }\n}\n\n/**\n * Handle url encoded form requests.\n *\n * @param  {Object}   body\n * @param  {String}   path\n * @param  {String}   method\n * @param  {Object}   options\n * @return {Function}\n */\nfunction urlencodedBodyHandler (body, path, method, options) {\n  var urlencodedBodyParser = require('body-parser').urlencoded({\n    type: [],\n    extended: false,\n    limit: options.limit,\n    parameterLimit: options.parameterLimit\n  })\n\n  var middleware = [urlencodedBodyParser]\n  var params = body && (body.formParameters || body.properties) || undefined\n\n  if (params) {\n    middleware.push(urlencodedBodyValidationHandler(params, options))\n  }\n\n  return compose(middleware)\n}\n\n/**\n * Validate url encoded form bodies.\n *\n * @param  {String} parameters\n * @return {String}\n */\nfunction urlencodedBodyValidationHandler (parameters, options) {\n  var sanitize = ramlSanitize(parameters)\n  var validate = ramlValidate(parameters, options.RAMLVersion)\n\n  return function ospreyUrlencodedBody (req, res, next) {\n    var body = sanitize(req.body)\n    var result = validate(body)\n\n    if (!result.valid) {\n      return next(createValidationError(formatRamlErrors(result.errors, 'form')))\n    }\n\n    // Discards invalid url encoded parameters.\n    req.body = body\n\n    return next()\n  }\n}\n\n/**\n * Handle XML requests.\n *\n * @param  {Object}   body\n * @param  {String}   path\n * @param  {String}   method\n * @param  {Object}   options\n * @return {Function}\n */\nfunction xmlBodyHandler (body, path, method, options) {\n  var xmlParser = xmlBodyParser(options)\n  var middleware = [xmlParser]\n\n  if (body && body.schema) {\n    middleware.push(xmlBodyValidationHandler(body.schema, path, method))\n  }\n\n  return compose(middleware)\n}\n\n/**\n * Parse an XML body request.\n *\n * @param  {Object}   options\n * @return {Function}\n */\nfunction xmlBodyParser (options) {\n  var libxml = getLibXml()\n  var bodyParser = require('body-parser').text({ type: [], limit: options.limit })\n\n  // Parse the request body text.\n  function xmlParser (req, res, next) {\n    var xml\n\n    try {\n      xml = libxml.parseXml(req.body)\n    } catch (err) {\n      // Add a status code to indicate bad requests automatically.\n      err.status = err.statusCode = 400\n      return next(err)\n    }\n\n    // Assign parsed XML document to the body.\n    req.xml = xml\n\n    return next()\n  }\n\n  return compose([bodyParser, xmlParser])\n}\n\n/**\n * Require `libxmljs` with error messaging.\n *\n * @return {Object}\n */\nfunction getLibXml () {\n  var libxml\n\n  try {\n    libxml = require('libxmljs')\n  } catch (err) {\n    err.message = 'Install \"libxmljs\" using `npm install libxmljs --save` for XML validation'\n    throw err\n  }\n\n  return libxml\n}\n\n/**\n * Validate XML request bodies.\n *\n * @param  {String}   str\n * @param  {String}   path\n * @param  {String}   method\n * @return {Function}\n */\nfunction xmlBodyValidationHandler (str, path, method) {\n  var libxml = getLibXml()\n  var schema\n\n  try {\n    schema = libxml.parseXml(str)\n  } catch (err) {\n    err.message = 'Unable to compile XML schema for ' + method + ' ' + path + ': ' + err.message\n    throw err\n  }\n\n  return function ospreyXmlBody (req, res, next) {\n    if (!req.xml.validate(schema)) {\n      return next(createValidationError(formatXmlErrors(req.xml.validationErrors)))\n    }\n\n    return next()\n  }\n}\n\n/**\n * Handle and validate form data requests.\n *\n * @param  {Object}   body\n * @param  {String}   path\n * @param  {String}   method\n * @param  {Object}   options\n * @return {Function}\n */\nfunction formDataBodyHandler (body, path, method, options) {\n  var Busboy = require('busboy')\n  var params = body && (body.formParameters || body.properties) || {}\n  var validators = {}\n  var sanitizers = {}\n\n  // Asynchonously sanitizes and validates values.\n  Object.keys(params).forEach(function (key) {\n    var param = extend(params[key], { repeat: false })\n\n    sanitizers[key] = ramlSanitize.rule(param)\n    validators[key] = ramlValidate.rule(param)\n  })\n\n  return function ospreyMethodForm (req, res, next) {\n    var received = {}\n    var errored = false\n    var busboy = req.form = new Busboy({ headers: req.headers, limits: options.busboyLimits })\n    var errors = {}\n\n    // Override `emit` to provide validations. Only validate when\n    // `formParameters` (or RAML 1.0 `properties`) are set.\n    if (body && (body.formParameters || body.properties)) {\n      busboy.emit = function emit (type, name, value, a, b, c) {\n        var close = type === 'field' ? noop : function () {\n          value.resume()\n        }\n\n        if (type === 'field' || type === 'file') {\n          if (!params.hasOwnProperty(name)) {\n            return close()\n          }\n\n          // Sanitize the value before emitting.\n          value = sanitizers[name](value)\n\n          // Check for repeat errors.\n          if (received[name] && !params[name].repeat) {\n            errors[name] = {\n              valid: false,\n              rule: 'repeat',\n              value: value,\n              key: name,\n              attr: false\n            }\n\n            errored = true\n\n            return close()\n          }\n\n          // Set the value to be already received.\n          received[name] = true\n\n          // Check the value is valid.\n          var result = validators[name](value, name)\n\n          // Collect invalid values.\n          if (!result.valid) {\n            errored = true\n            errors[name] = result\n          }\n\n          // Don't emit when an error has already occured. Check after the\n          // value validation because we want to collect all possible errors.\n          if (errored) {\n            return close()\n          }\n        } else if (type === 'finish') {\n          // Finish emits twice, but is actually done the second time.\n          if (!this._done) {\n            return Busboy.prototype.emit.call(this, 'finish')\n          }\n\n          var validationErrors = Object.keys(params)\n            .filter(function (key) {\n              return params[key].required && !received[key]\n            })\n            .map(function (key) {\n              return {\n                valid: false,\n                rule: 'required',\n                value: undefined,\n                key: key,\n                attr: true\n              }\n            })\n            .concat(values(errors))\n          if (validationErrors.length) {\n            Busboy.prototype.emit.call(\n              this,\n              'error',\n              createValidationError(formatRamlErrors(validationErrors, 'form'))\n            )\n\n            return\n          }\n        }\n\n        return Busboy.prototype.emit.apply(this, arguments)\n      }\n    }\n\n    return next()\n  }\n}\n\n/**\n * Create a validation error.\n *\n * @param  {String} type\n * @param  {Array}  errors\n * @return {Error}\n */\nfunction createValidationError (errors) {\n  var self = createError(400, 'Request failed to validate against RAML definition')\n\n  self.requestErrors = errors\n  self.ramlValidation = true\n\n  return self\n}\n\n/**\n * Discard the request body.\n *\n * @param {Object}   req\n * @param {Object}   res\n * @param {Function} next\n */\nfunction discardBody (req, res, next) {\n  debug('%s %s: Discarding request stream', req.method, req.url)\n\n  // TODO(blakeembrey): Make sure this doesn't break in future node versions.\n  if (req._readableState.ended) {\n    return next()\n  }\n\n  req.resume()\n  req.on('end', next)\n  req.on('error', next)\n}\n\n/**\n * Enable fast query parameters (E.g. discard them all).\n *\n * @param {Object}   req\n * @param {Object}   res\n * @param {Function} next\n */\nfunction ospreyFastQuery (req, res, next) {\n  req.url = parseurl(req).pathname\n  req.query = {}\n\n  return next()\n}\n\n/**\n * Noop.\n */\nfunction noop () {}\n\n/**\n * Make RAML validation errors match standard format.\n *\n * @param  {Array} errors\n * @return {Array}\n */\nfunction formatRamlErrors (errors, type) {\n  return errors.map(function (error) {\n    return {\n      type: type,\n      dataPath: error.key,\n      keyword: error.rule,\n      schema: error.attr,\n      data: error.value,\n      message: 'invalid ' + type + ' (' + error.rule + ', ' + error.attr + ')'\n    }\n  })\n}\n\n/**\n * Make JSON validation errors match standard format.\n *\n * @param  {Array} errors\n * @return {Array}\n */\nfunction formatJsonErrors (errors) {\n  return errors.map(function (error) {\n    return {\n      type: 'json',\n      keyword: error.keyword,\n      dataPath: error.dataPath,\n      message: error.message,\n      data: error.data,\n      schema: error.schema\n    }\n  })\n}\n\n/**\n * Make XML validation errors match standard format.\n *\n * @param  {Array} errors\n * @return {Array}\n */\nfunction formatXmlErrors (errors) {\n  return errors.map(function (error) {\n    return {\n      type: 'xml',\n      message: error.message,\n      meta: {\n        domain: error.domain,\n        code: error.code,\n        level: error.level,\n        column: error.column,\n        line: error.line\n      }\n    }\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-osprey/node_modules/osprey/lib/server.js":"var parseurl = require('parseurl')\nvar router = require('osprey-router')\nvar resources = require('osprey-resources')\nvar handler = require('osprey-method-handler')\nvar dtexp = require('datatype-expansion')\n\n/**\n * Non-expandable RAML 1.0 types.\n *\n * @type {Array}\n */\nvar NON_EXPANDABLE_TYPES = [\n  'any', 'object', 'array',\n  'string', 'number', 'integer', 'boolean', 'file',\n  'date-only', 'time-only', 'datetime-only', 'datetime'\n]\n\n/**\n * Expose `createServer`.\n */\nmodule.exports = createServer\nmodule.exports.notFoundHandler = notFoundHandler\n\n/**\n * Create server middleware.\n *\n * @param  {Object}   raml\n * @param  {Object}   options\n * @return {Function}\n */\nfunction createServer (raml, opts) {\n  var options = opts || {}\n\n  if (raml.hasOwnProperty('types')) {\n    raml = expandTypes(raml)\n  }\n\n  var resourceHandler = resources(raml.resources, function (schema, path) {\n    return handler(schema, path, schema.method, options)\n  })\n\n  var app = router({ ramlUriParameters: resourceHandler.ramlUriParameters, RAMLVersion: options.RAMLVersion })\n  var corsOpts = typeof options.cors === 'boolean' ? undefined : options.cors\n\n  if (options.cors) {\n    var cors = require('cors')\n\n    app.options('*', cors(corsOpts))\n    app.use(cors(corsOpts))\n  }\n\n  if (options.compression) {\n    var compression = require('compression')\n\n    app.use(compression())\n  }\n\n  app.use(resourceHandler)\n\n  if (options.notFoundHandler !== false) {\n    app.use(notFoundHandler)\n  }\n\n  return app\n}\n\n/**\n * The Osprey not found handler is simplistic and tests for `resourcePath`.\n *\n * @param  {Object}   req\n * @param  {Object}   res\n * @param  {Function} next\n */\nfunction notFoundHandler (req, res, next) {\n  // Check for existence of the method handler.\n  if (req.resourcePath) {\n    return next()\n  }\n\n  var notFoundError = new Error(\n    req.method + ' ' + parseurl(req).pathname +\n    ' does not exist in the RAML for this application'\n  )\n\n  notFoundError.ramlNotFound = true\n  notFoundError.status = notFoundError.statusCode = 404\n\n  return next(notFoundError)\n}\n\n/**\n * Expand RAML 1.0 types.\n *\n * @param  {Object}   raml\n * @param  {Object}\n */\nfunction expandTypes (raml) {\n  var ctx = _createTypesContext(raml.types)\n  if (!ctx) {\n    return raml\n  }\n\n  function _expand (data, ctx) {\n    if (!(data instanceof Object)) {\n      return data\n    }\n\n    for (var key in data) {\n      var val = data[key]\n\n      if (val instanceof Array) {\n        data[key] = []\n        val.forEach(function (el) {\n          data[key].push(_expand(el, ctx))\n        })\n        continue\n      }\n\n      if (val instanceof Object) {\n        data[key] = _expand(val, ctx)\n        continue\n      }\n    }\n\n    var isExpandable = data.type &&\n      data.type.length === 1 &&\n      NON_EXPANDABLE_TYPES.indexOf(data.type[0]) === -1\n\n    if (isExpandable) {\n      var expanded = dtexp.expandedForm(data, ctx)\n      return dtexp.canonicalForm(expanded)\n    }\n\n    return data\n  }\n\n  function _createTypesContext (types) {\n    if (!types || types.length < 1) {\n      return\n    }\n    var ctx = {}\n    types.forEach(function (el) {\n      for (var key in el) {\n        ctx[key] = el[key]\n      }\n    })\n    return ctx\n  }\n\n  if (raml.resources) {\n    raml.resources = _expand(raml.resources, ctx)\n  }\n\n  return raml\n}\n","/home/travis/build/npmtest/node-npmtest-osprey/node_modules/osprey-resources/osprey-resources.js":"var extend = require('xtend')\nvar router = require('osprey-router')\n\n/**\n * Expose `ospreyResources`.\n */\nmodule.exports = ospreyResources\n\n/**\n * Accept resources and a handler function.\n *\n * @param  {Array}    resources\n * @param  {Function} handler\n * @return {Function}\n */\nfunction ospreyResources (resources, handler) {\n  return createResources(router(), resources, '', null, handler)\n}\n\n/**\n * Create a middleware router that handles the resource.\n *\n * @param  {Function} app\n * @param  {Array}    resources\n * @param  {String}   prefix\n * @param  {Object}   params\n * @param  {Function} handler\n * @return {Function}\n */\nfunction createResources (app, resources, prefix, params, handler) {\n  if (Array.isArray(resources)) {\n    resources.forEach(function (resource) {\n      createResource(app, resource, prefix, params, handler)\n    })\n  }\n\n  return app\n}\n\n/**\n * Create middleware for a single RAML resource and recursively nest children.\n *\n * @param  {Function} app\n * @param  {Object}   resource\n * @param  {String}   prefix\n * @param  {Object}   params\n * @param  {Function} handler\n * @return {Function}\n */\nfunction createResource (app, resource, prefix, params, handler) {\n  var methods = resource.methods\n  var resources = resource.resources\n  var uriParams = extend(params, resource.uriParameters)\n  var path = prefix + (resource.relativeUri || '')\n\n  if (methods) {\n    methods.forEach(function (method) {\n      var handle = handler(method, path)\n\n      // Enables the ability to skip a handler by returning null.\n      if (handle != null) {\n        app[method.method](path, uriParams, handle, exitRouter)\n      }\n    })\n  }\n\n  if (resources) {\n    createResources(app, resources, path, uriParams, handler)\n  }\n\n  return app\n}\n\n/**\n * Exit the router implementation.\n */\nfunction exitRouter (req, res, next) {\n  return next('router')\n}\n","/home/travis/build/npmtest/node-npmtest-osprey/node_modules/osprey/lib/proxy.js":"var http = require('http')\nvar https = require('https')\nvar arrify = require('arrify')\nvar querystring = require('querystring')\nvar is = require('type-is')\nvar url = require('url')\nvar FormData = require('form-data')\nvar compose = require('compose-middleware').compose\n\n/**\n * Expose `createProxy`.\n */\nmodule.exports = createProxy\n\n/**\n * Turn Osprey into a proxy.\n *\n * @param  {Function} middleware\n * @param  {Array}    addresses\n * @return {Function}\n */\nfunction createProxy (middleware, addresses) {\n  var fns = []\n\n  var addrs = arrify(addresses).map(function (address) {\n    var addr = url.format(address)\n\n    // Remove any trailing slashes from the address.\n    addr = addr.replace(/\\/$/, '')\n\n    return /^\\w+:\\/\\//.test(addr) ? addr : 'http://' + addr\n  })\n\n  fns.push(middleware)\n\n  fns.push(function proxyAddress (req, res, next) {\n    var addr = addrs.shift()\n    var opts = url.parse(addr + req.url)\n\n    // Push the address back onto the array.\n    addrs.push(addr)\n\n    // Proxy request headers (minus now invalid content-length).\n    opts.method = req.method\n    opts.headers = req.headers\n\n    if (req.form) {\n      var formData = new FormData()\n\n      req.form.on('file', function (name, stream, filename, encoding, type) {\n        formData.append(name, stream, {\n          filename: filename,\n          contentType: type\n        })\n      })\n\n      req.form.on('field', function (name, value) {\n        formData.append(name, value)\n      })\n\n      req.form.on('finish', function () {\n        // Remove the old `Content-Type` header which has an invalid boundary.\n        delete req.headers['content-type']\n        delete req.headers['content-length']\n\n        // Add form data boundary and content length headers.\n        opts.headers = formData.getHeaders(req.headers)\n\n        return formData.pipe(proxyRequest(opts, res, next))\n      })\n\n      req.form.on('error', next)\n\n      return req.pipe(req.form)\n    }\n\n    var proxy = proxyRequest(opts, res, next)\n\n    if (req.body) {\n      var body = ''\n\n      if (is(req, 'urlencoded')) {\n        body = querystring.stringify(req.body)\n      } else if (is(req, 'json')) {\n        body = JSON.stringify(req.body)\n      } else {\n        // Support XML throughput.\n        body = req.body\n      }\n\n      opts.headers['content-length'] = String(Buffer.byteLength(body))\n      proxy.write(body)\n      proxy.end()\n      return\n    }\n\n    return req._readableState.ended ? proxy.end() : req.pipe(proxy)\n  })\n\n  return createHttpHandler(compose(fns))\n}\n\n/**\n * Create the proxy request.\n *\n * @param  {Object}   opts\n * @param  {Stream}   writableStream\n * @param  {Function} cb\n * @return {Stream}\n */\nfunction proxyRequest (opts, writableStream, errCb) {\n  var engine = opts.protocol === 'https:' ? https : http\n\n  var proxy = engine.request(opts, function (response) {\n    response.pipe(writableStream)\n  })\n\n  proxy.on('error', errCb)\n\n  return proxy\n}\n\n/**\n * Create a http handler.\n *\n * @param  {Function} app\n * @return {Function}\n */\nfunction createHttpHandler (app) {\n  var finalhandler = require('finalhandler')\n\n  return http.createServer(function (req, res) {\n    return app(req, res, finalhandler(req, res))\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-osprey/node_modules/osprey/lib/security/index.js":"var extend = require('xtend')\nvar resources = require('osprey-resources')\nvar invariant = require('invariant')\nvar createError = require('http-errors')\nvar compose = require('compose-middleware').compose\nvar debug = require('debug')('osprey:security')\nvar scope = require('./scope')\nvar handler = require('./handler')\n\n/**\n * Expose security middleware.\n */\nmodule.exports = createSecurity\nmodule.exports.scope = scope\n\n/**\n * Create a security middleware function from RAML.\n *\n * @param  {Object}   raml\n * @param  {Object}   opts\n * @return {Function}\n */\nfunction createSecurity (raml, opts) {\n  var middleware = []\n  var options = extend(opts)\n  var authenticate = {}\n\n  // Create scheme handlers from RAML.\n  if (Array.isArray(raml.securitySchemes)) {\n    raml.securitySchemes.forEach(function (schemes) {\n      Object.keys(schemes).forEach(function (key) {\n        var scheme = schemes[key]\n        var handlerOptions = options[key]\n\n        if (!handlerOptions) {\n          console.warn('No options configured for security scheme \"%s\"', key)\n          return\n        }\n\n        var res = handler(scheme, handlerOptions, key)\n\n        invariant(\n          res && typeof res.handler === 'function',\n          'Security schemes must provide a `handler` function that can ' +\n          'accept  options and return middleware for securing resources'\n        )\n\n        // Alias the handler for creating authentication middleware.\n        authenticate[key] = res.handler\n\n        // Mount routers in order of security schemes.\n        // Note: Not all schemes need a router. E.g. \"Basic Authentication\".\n        if (res.router) {\n          middleware.push(res.router)\n        }\n      })\n    })\n  }\n\n  middleware.push(resources(raml.resources, function (method, path) {\n    var securedBy = method.securedBy || raml.securedBy\n\n    if (!Array.isArray(securedBy) || securedBy.length === 0) {\n      return\n    }\n\n    var handlers = []\n    var anonymous = false\n    var middleware\n\n    for (var i = 0; i < securedBy.length; i++) {\n      var secured = securedBy[i]\n\n      // Support anonymous access.\n      if (secured == null) {\n        anonymous = true\n        continue\n      }\n\n      // Handle the basic case of a security string.\n      if (typeof secured === 'string') {\n        if (authenticate.hasOwnProperty(secured)) {\n          middleware = compose(authenticate[secured](null, path))\n\n          handlers.push(middleware)\n        } else {\n          debug('Path \"%s\" not secured with \"%s\"', path, secured)\n        }\n        continue\n      }\n\n      // Support more complex object options.\n      Object.keys(secured).forEach(function (key) {\n        if (authenticate.hasOwnProperty(key)) {\n          middleware = compose(authenticate[key](secured[key], path))\n\n          handlers.push(middleware)\n        } else {\n          debug('Path \"%s\" not secured with \"%s\"', path, key)\n        }\n      })\n    }\n\n    // Create a single middleware from an array of handlers.\n    return authenticationStack(handlers, anonymous)\n  }))\n\n  return compose(middleware)\n}\n\n/**\n * Create a middleware function from a stack of handlers.\n *\n * @param  {Array}    handlers\n * @param  {Boolean}  allowAnonymous\n * @return {Function}\n */\nfunction authenticationStack (handlers, allowAnonymous) {\n  if (!handlers.length) {\n    return\n  }\n\n  return function (req, res, done) {\n    var index = 1\n    var errors = []\n\n    function next (err) {\n      // Fix Passport.js messing with request: jaredhanson/passport#390\n      res.statusCode = 200\n      res.removeHeader('WWW-Authenticate')\n\n      // Enable exiting early when authorization succeeds.\n      if (!err) {\n        return done()\n      }\n\n      // Keep track of all authorization errors.\n      errors.push(err)\n\n      if (index === handlers.length) {\n        if (allowAnonymous) {\n          return done()\n        }\n\n        // Use the errors status code, when it's the only error code.\n        var status = errors.reduce(function (code, error) {\n          if (code == null && error.status > 399 && error.status < 500) {\n            return error.status\n          }\n\n          if (code != null && error.status === code) {\n            return code\n          }\n\n          return 500\n        }, null)\n\n        // Create an error that can be handled later.\n        var error = createError(status, 'Unauthorized')\n        error.ramlAuthorization = true\n        error.authorizationErrors = errors\n        return done(error)\n      }\n\n      var handler = handlers[index++]\n\n      return handler(req, res, next)\n    }\n\n    // Start outside the `next` handler.\n    var handler = handlers[0]\n\n    return handler(req, res, next)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-osprey/node_modules/osprey/lib/security/scope.js":"var arrify = require('arrify')\nvar TokenError = require('oauth2orize').TokenError\n\n/**\n * Export scope middleware.\n */\nmodule.exports = enforceScope\n\n/**\n * Create a middleware function for enforcing a scope on an endpoint.\n *\n * @param  {String|Array<String>} scope\n * @return {Function}\n */\nfunction enforceScope (scope) {\n  var scopes = arrify(scope)\n\n  if (scopes.length === 0) {\n    throw new TypeError('Expected a scope or array of scopes, but got: ' + scope)\n  }\n\n  return function scope (req, res, next) {\n    var userScopes = arrify(req.authInfo.scope)\n\n    // Find one scope the user has and authorize access.\n    for (var i = 0; i < scopes.length; i++) {\n      if (userScopes.indexOf(scopes[i]) > -1) {\n        return next()\n      }\n    }\n\n    return next(new TokenError('User unsupported scope: ' + scopes, 'invalid_scope'))\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-osprey/node_modules/osprey/lib/security/handler.js":"var parse = require('url').parse\nvar parseurl = require('parseurl')\nvar querystring = require('querystring')\nvar router = require('osprey-router')\nvar oauth2orize = require('oauth2orize')\nvar invariant = require('invariant')\nvar passport = require('passport')\nvar cookieSession = require('cookie-session')\nvar BasicStrategy = require('passport-http').BasicStrategy\nvar DigestStrategy = require('passport-http').DigestStrategy\nvar ClientPasswordStrategy = require('passport-oauth2-client-password').Strategy\nvar BearerStrategy = require('passport-http-bearer').Strategy\nvar extend = require('xtend')\nvar bodyParser = require('body-parser')\nvar arrify = require('arrify')\nvar scope = require('./scope')\n\n/**\n * Expose handler.\n */\nmodule.exports = createHandler\n\n/**\n * Create a handler object from an object of RAML security scheme options.\n *\n * @param  {Object} scheme\n * @param  {Object} options\n * @param  {String} key\n * @return {Object}\n */\nfunction createHandler (scheme, options, key) {\n  // Allow functions to override any other options.\n  if (typeof options === 'function') {\n    return options(scheme, key)\n  }\n\n  if (scheme.type === 'OAuth 2.0') {\n    return createOAuth2Handler(scheme, options, key)\n  }\n\n  if (scheme.type === 'Basic Authentication') {\n    return createBasicAuthHandler(scheme, options, key)\n  }\n\n  if (scheme.type === 'Digest Authentication') {\n    return createDigestAuthHandler(scheme, options, key)\n  }\n\n  throw new TypeError(\n    'To enable ' + scheme.type + ', you must provide a function as the ' +\n    'option. The function must return an object with a handler method and, ' +\n    'optionally, a middleware function (e.g. using `osprey-router`).'\n  )\n}\n\n/**\n * Create a handler for OAuth 2.0.\n *\n * @param  {Object} scheme\n * @param  {Object} opts\n * @param  {String} key\n * @return {Object}\n */\nfunction createOAuth2Handler (scheme, opts, key) {\n  var app = router()\n  var server = oauth2orize.createServer()\n  var settings = scheme.settings\n  var options = extend({ grant: {}, exchange: {} }, opts)\n  var scopes = arrify(scheme.settings.scopes)\n\n  var BASIC_KEY = 'osprey:' + key + ':basic'\n  var CLIENT_PASSWORD_KEY = 'osprey:' + key + 'oauth2-client-password'\n  var BEARER_KEY = 'osprey:' + key + ':bearer'\n\n  invariant(\n    settings.authorizationGrants && settings.authorizationGrants.length > 0,\n    'RAML \"authorizationGrants\" must specify supported grant types'\n  )\n\n  invariant(\n    typeof options.findUserByToken === 'function',\n    'Option \"findUserByToken\" must be a function: %s',\n    'https://github.com/jaredhanson/passport-http-bearer#configure-strategy'\n  )\n\n  invariant(\n    typeof options.authenticateClient === 'function',\n    'Option \"authenticateClient\" must be a function: %s',\n    'https://github.com/jaredhanson/passport-oauth2-client-password#configure-strategy'\n  )\n\n  // Set up passport for authentication.\n  passport.use(BASIC_KEY, new BasicStrategy(options.authenticateClient))\n  passport.use(CLIENT_PASSWORD_KEY, new ClientPasswordStrategy(options.authenticateClient))\n  passport.use(BEARER_KEY, new BearerStrategy(options.findUserByToken))\n\n  var accessTokenUri = parse(options.accessTokenUri || settings.accessTokenUri).path\n\n  // Body parsing middleware for OAuth 2.0 routes.\n  var parseBody = [bodyParser.json(), bodyParser.urlencoded({ extended: false })]\n\n  invariant(\n    validPathEnding(settings.accessTokenUri, accessTokenUri),\n    '`accessTokenUri` must match the suffix of the RAML `accessTokenUri` setting'\n  )\n\n  // Skip authorization page logic if not required.\n  if (\n    settings.authorizationGrants.indexOf('code') > -1 ||\n    settings.authorizationGrants.indexOf('token') > -1\n  ) {\n    var serializeClient = options.serializeClient\n    var deserializeClient = options.deserializeClient\n    var sessionKeys = options.sessionKeys\n    var ensureLoggedIn = options.ensureLoggedIn\n    var authorizeClient = options.authorizeClient\n    var serveAuthorizationPage = options.serveAuthorizationPage\n    var immediateAuthorization = options.immediateAuthorization\n    var authorizationUri = parse(options.authorizationUri || settings.authorizationUri).path\n\n    invariant(\n      validPathEnding(settings.authorizationUri, authorizationUri),\n      '`authorizationUri` must match the suffix of the RAML `authorizationUri` setting'\n    )\n\n    invariant(\n      typeof serializeClient === 'function',\n      'Option \"serializeClient\" must be a function: %s',\n      'https://github.com/jaredhanson/oauth2orize#session-serialization'\n    )\n\n    invariant(\n      typeof deserializeClient === 'function',\n      'Option \"deserializeClient\" must be a function: %s',\n      'https://github.com/jaredhanson/oauth2orize#session-serialization'\n    )\n\n    invariant(\n      Array.isArray(sessionKeys) && sessionKeys.length > 0,\n      'Options \"sessionKeys\" must be an array: %s',\n      'https://github.com/expressjs/cookie-session#keys'\n    )\n\n    invariant(\n      typeof authorizeClient === 'function',\n      'Option \"authorizeClient\" must be a function: %s',\n      'https://github.com/jaredhanson/oauth2orize#implement-authorization-endpoint'\n    )\n\n    invariant(\n      typeof serveAuthorizationPage === 'function',\n      'Option \"serveAuthorizationPage\" must be a middleware function that ' +\n      'serves the authorization dialog page'\n    )\n\n    invariant(\n      typeof ensureLoggedIn === 'function',\n      'Option \"ensureLoggedIn\" must be a middleware function that handles ' +\n      'when the user is logged out'\n    )\n\n    server.serializeClient(serializeClient)\n    server.deserializeClient(deserializeClient)\n\n    // Create session middleware for Passport to work properly.\n    var session = cookieSession({\n      name: 'osprey-' + key,\n      keys: options.sessionKeys\n    })\n\n    // Authorize client validation.\n    var validate = function (clientId, redirectUri, scope, type, done) {\n      validateScope(scopes, scope)\n\n      return authorizeClient(clientId, redirectUri, scope, type, done)\n    }\n\n    // Set up immediate function. Wrap it for consistent arity.\n    var immediate = immediateAuthorization ? function (client, user, scope, done) {\n      // Custom callback for scope injection.\n      function cb (err, validated) {\n        return done(err, validated, { scope: scope })\n      }\n\n      return immediateAuthorization(client, user, scope, cb)\n    } : null\n\n    // Mount authorization page. DO NOT ENABLE CORS BEFORE THIS ROUTE!\n    app.get(\n      authorizationUri,\n      session,\n      ensureLoggedIn,\n      attachQuery,\n      attachRedirect,\n      server.authorize(validate, immediate),\n      serveAuthorizationPage\n    )\n\n    // Page to POST form to for authorization.\n    app.post(\n      authorizationUri,\n      session,\n      ensureLoggedIn,\n      parseBody,\n      attachRedirect,\n      server.decision(function (req, done) {\n        return done(null, {\n          scope: arrify(req.body.scope)\n        })\n      })\n    )\n  }\n\n  // Mount the access token endpoint.\n  app.post(\n    accessTokenUri,\n    parseBody,\n    passport.initialize(),\n    passport.authenticate([BASIC_KEY, CLIENT_PASSWORD_KEY], { session: false }),\n    server.token()\n  )\n\n  settings.authorizationGrants.forEach(function (grantType) {\n    var grant = options.grant[grantType]\n    var exchange = options.exchange[grantType]\n\n    if (grantType === 'code') {\n      invariant(\n        typeof grant === 'function',\n        'Option \"grant.code\" must be a function: %s',\n        'https://github.com/jaredhanson/oauth2orize#register-grants'\n      )\n\n      invariant(\n        typeof exchange === 'function',\n        'Option \"exchange.code\" must be a function: %s',\n        'https://github.com/jaredhanson/oauth2orize#register-exchanges'\n      )\n\n      server.grant(oauth2orize.grant.code(function (client, redirectUri, user, ares, done) {\n        validateScope(scopes, ares.scope)\n\n        return grant(client, redirectUri, user, ares, done)\n      }))\n\n      server.exchange(oauth2orize.exchange.code(exchange))\n\n      return\n    }\n\n    if (grantType === 'token') {\n      invariant(\n        typeof grant === 'function',\n        'Option \"grant.token\" must be a function: %s',\n        'https://github.com/jaredhanson/oauth2orize#register-grants'\n      )\n\n      server.grant(oauth2orize.grant.token(function (client, user, ares, done) {\n        validateScope(scopes, ares.scope)\n\n        return grant(client, user, ares, done)\n      }))\n\n      return\n    }\n\n    if (grantType === 'owner') {\n      invariant(\n        typeof exchange === 'function',\n        'Option \"exchange.owner\" must be a function: %s',\n        'https://github.com/jaredhanson/oauth2orize#register-grants'\n      )\n\n      server.exchange(oauth2orize.exchange.password(function (client, username, password, scope, done) {\n        validateScope(scopes, scope)\n\n        return exchange(client, username, password, scope, done)\n      }))\n\n      return\n    }\n\n    if (grantType === 'credentials') {\n      invariant(\n        typeof exchange === 'function',\n        'Option \"exchange.credentials\" must be a function: %s',\n        'https://github.com/jaredhanson/oauth2orize#register-grants'\n      )\n\n      server.exchange(oauth2orize.exchange.clientCredentials(function (client, scope, done) {\n        validateScope(scopes, scope)\n\n        return exchange(client, scope, done)\n      }))\n\n      return\n    }\n\n    throw new TypeError('Unknown grant \"' + key + '\" type: ' + grantType)\n  })\n\n  var refreshToken = options.exchange.refresh\n\n  // Refresh tokens are optional.\n  if (typeof refreshToken === 'function') {\n    server.exchange(oauth2orize.exchange.refreshToken(refreshToken))\n  }\n\n  var authenticate = [\n    passport.initialize(),\n    passport.authenticate(BEARER_KEY, { session: false, failWithError: true })\n  ]\n\n  /**\n   * OAuth 2.0 authentication handler creator.\n   *\n   * @param  {Object}   options\n   * @return {Function}\n   */\n  function handler (options) {\n    if (!options) {\n      return authenticate\n    }\n\n    // Return with scope validation.\n    return authenticate.concat(scope(options.scopes))\n  }\n\n  return { router: app, handler: handler }\n}\n\n/**\n * Basic authentication handler.\n *\n * @param  {Object} scheme\n * @param  {Object} options\n * @param  {String} key\n * @return {Object}\n */\nfunction createBasicAuthHandler (scheme, options, key) {\n  var KEY = 'osprey:' + key\n\n  invariant(\n    typeof options.validateUser === 'function',\n    'Option \"validateUser\" should be a function: %s',\n    'https://github.com/jaredhanson/passport-http#usage-of-http-basic'\n  )\n\n  passport.use(KEY, new BasicStrategy(\n    { realm: options.realm },\n    options.validateUser\n  ))\n\n  var authenticate = [\n    passport.initialize(),\n    passport.authenticate(KEY, { session: false, failWithError: true })\n  ]\n\n  return {\n    handler: function () { return authenticate }\n  }\n}\n\n/**\n * Digest authentication handler.\n *\n * @param  {Object} scheme\n * @param  {Object} options\n * @param  {String} key\n * @return {Object}\n */\nfunction createDigestAuthHandler (scheme, options, key) {\n  var KEY = 'osprey:' + key\n\n  invariant(\n    typeof options.findUserByUsername === 'function',\n    'Option \"findUserByUsername\" should be a function: %s',\n    'https://github.com/jaredhanson/passport-http#usage-of-http-digest'\n  )\n\n  passport.use(KEY, new DigestStrategy(\n    { qop: 'auth', realm: options.realm, domain: options.domain },\n    options.findUserByUsername\n  ))\n\n  var authenticate = [\n    passport.initialize(),\n    passport.authenticate(KEY, { session: false, failWithError: true })\n  ]\n\n  return {\n    handler: function () { return authenticate }\n  }\n}\n\n/**\n * Check a path is valid against a url.\n *\n * @param  {String}  str\n * @param  {String}  value\n * @return {Boolean}\n */\nfunction validPathEnding (url, path) {\n  return path.charAt(0) === '/' && url.slice(-path.length) === path\n}\n\n/**\n * Validate the scopes are all correct.\n *\n * @param  {Array} scopes\n * @param  {Array} requestedScopes\n * @return {Array}\n */\nfunction validateScope (scopes, requestedScopes) {\n  if (scopes.length) {\n    for (var i = 0; i < requestedScopes.length; i++) {\n      if (scopes.indexOf(requestedScopes[i]) === -1) {\n        throw new oauth2orize.TokenError('Unknown scope: ' + requestedScopes[i], 'invalid_request')\n      }\n    }\n  }\n}\n\n/**\n * Add `query` property when server does not already support it.\n *\n * @param {Object}   req\n * @param {Object}   res\n * @param {Function} next\n */\nfunction attachQuery (req, res, next) {\n  if (req.query) {\n    return next()\n  }\n\n  // Parse querystring for OAuth2orize.\n  req.query = querystring.parse(parseurl(req).query)\n\n  return next()\n}\n\n/**\n * Attach a redirect function when the server does not support it already.\n *\n * @param {Object}   req\n * @param {Object}   res\n * @param {Function} next\n */\nfunction attachRedirect (req, res, next) {\n  if (res.redirect) {\n    return next()\n  }\n\n  // Do HTTP redirects.\n  res.redirect = redirect\n\n  return next()\n}\n\n/**\n * Redirection function for `http#Response`.\n *\n * @param {String} location\n */\nfunction redirect (location) {\n  this.statusCode = 302\n  this.setHeader('Location', location)\n  this.setHeader('Content-Length', '0')\n  this.end()\n}\n"}